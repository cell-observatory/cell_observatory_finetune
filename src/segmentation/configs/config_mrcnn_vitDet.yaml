defaults:
  - _self_
  - models: maskrcnn_fpn        # Loads configs/models/mask_rcnn.yaml
  - models/backbones: vitDet     # Loads configs/models/backbones/vitDet.yaml
  - datasets: skittlez       # Loads configs/datasets/skittlez.yaml
  - metrics: metrics        # Loads configs/metrics/metrics.yaml

# Model type
network: maskrcnn

# Training paradigm
paradigm: segmentation.training.backend_segmentation.supervised

# Backbone 
backbone_target: segmentation.models.backbones.vitDet.SimpleFeaturePyramid 
backbone_out_channels: 256 # C5 = 2048
output_features: ["p2", "p3"]

# Paths
outdir: /clusterfs/nvme/segment_4d/test_4
logdir: ${outdir}/logs
checkpointdir: ${outdir}/checkpoints #/clusterfs/nvme/segment_4d/test/checkpoints # NOTE: we look for checkpoints in the outdir but load via this directory
train_db_savedir: ${outdir}/db
db_path: /clusterfs/nvme/segment_4d/final_pipeline_v3/db/segmentation_curation_test.db

finetune: null

# Optimizer parameters
opt: adamw # TODO: to use fused lamb, install DeepSpeed with the DS_BUILD_FUSED_LAMB environment variable 
lr: 5e-5 # 5e-4 # initial learning rate
wd: 5e-5 # initial weight decay
ld: null # optional layer decay
clip_grad: 0.5
ema: [0.998, 1.0]

# Training loop parameters
epochs: 500
val_interval: 1
log_step: 100
val_log_step: 20
warmup: 25
cooldown: 50
fixedlr: false
dropout: 0.1
fixed_dropout_depth: false

# Quantization
amp: fp16  # ["no", "fp16", "bf16", "fp8"]

# Profiling
profile: false

# Compute resources
workers: 1 # number of worker nodes
gpu_workers: 1 #4 # number of gpus per worker
cpu_workers: 4 #16 # number of cpu cores per worker (num gpus per worker * number of cpu cores per gpu)
distributed_sampler: true

# DeepSpeed config (Hydra will pass it to training loop)
deepspeed_config:
  fp16:
    enabled: true
    auto_cast: true
    loss_scale: 0 #  dynamic loss scaling (0 = auto)
    loss_scale_window: 1000 # number of good steps before increasing the scale again.
    hysteresis: 2 # number of overflows to wait before decreasing the loss scale.
    consecutive_hysteresis: true # if true, hysteresis must be consecutive (i.e., N overflows in a row)
    min_loss_scale: 1 # minimum loss scale to use
  bf16:
    enabled: false 
    auto_cast: false
  zero_optimization:
    stage: 3 # full ZeRO-3 with parameter + gradient + optimizer partitioning
    reduce_bucket_size: auto # controls how many elements are grouped before being reduced
    reduce_scatter: true # fused reduce + scatter ops
    contiguous_gradients: true # gradients allocated in a contiguous memory block
    overlap_comm: true # overlap communication with computation
    stage3_prefetch_bucket_size: auto # params to prefetch in advance
    stage3_param_persistence_threshold: auto # keep parameters in memory if theyâ€™re small and reused often
    stage3_max_live_parameters: 1e9 
    stage3_max_reuse_distance: 1e9
    stage3_gather_16bit_weights_on_model_save: true # reconstruct full weights (in FP16) during saving, rather than saving sharded pieces
    offload_optimizer: # disables offloading to CPU, everything stays on GPU
      device: none 
    offload_param:
      device: none
  tensorboard:
    enabled: true
    output_path: ${logdir}
    job_name: ${outdir}
  csv_monitor:
    enabled: true
    output_path: ${logdir}
    job_name: ${outdir}
  gradient_clipping: ${clip_grad}
  steps_per_print: 100
  gradient_accumulation_steps: 1 # number of steps to accumulate gradients before performing a backward/update pass
  train_batch_size: ${datasets.batch_size}
  zero_allow_untested_optimizer: true
  flops_profiler:
    enabled: true
    profile_step: 1
    module_depth: -1
    top_modules: 1
    detailed: true
    output_file: ${logdir}/flops_profiler.log

# Ray ScalingConfig
scaling_config:
  num_workers: null
  use_gpu: true
  resources_per_worker:
    CPU: null
    GPU: 1
  trainer_resources:
    CPU: 1

# Ray RunConfig
run_config:
  log_to_file: true
  storage_path: ${outdir}
  checkpoint_config:
    num_to_keep: 3
    checkpoint_score_attribute: loss
    checkpoint_score_order: min
  failure_config:
    max_failures: 0
  
# Torch Config
torch_config:
  timeout_s: 3600