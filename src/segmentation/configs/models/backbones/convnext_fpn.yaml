defaults:
  - _self_

# FPN

_target_: segmentation.models.backbones.fpn.BackboneWithFPN
# NOTE: FPN may add an extra LastLevelMaxPool layer to the last feature map
# Hence, the output feature maps may have len(return_layers) + 1 maps
# return layers specifies which feature maps to run through the FPN
return_layers: {"p3": "p3", "p4": "p4", "p5": "p5"} 
in_channels_list: [96, 192, 384] # , 1024, 2048
out_channels: ${backbone_out_channels}
norm_layer: null

# backbone

# NOTE: currently we only use the first 3 stages of ConvNeXt
#       this is because the image size for 3D volumes are 
#       typically 256x256x256, which would make the last stage
#       of ConvNext prohibitively small

# TODO: test the utility of adding back the last stage
#       and see if it improves performance

# configs (assuming num_stages = 4, note that each stage downsamples the input by 2x):
# 'convnext-tiny': {depths: (3, 3, 9, 3), dims: (96, 192, 384, 768)}
# 'convnext-small': {depths: (3, 3, 27, 3), dims: (96, 192, 384, 768)}
# 'convnext-base': {depths: (3, 3, 27, 3), dims: (128, 256, 512, 1024)}
# 'convnext-large': {depths: (3, 3, 27, 3), dims: (192, 384, 768, 1536)}

backbone:
  _target_: ${backbone_target}
  channel_in: ${datasets.channel_in}
  num_stages: 3
  depths: [3, 3, 9]
  dims: ${..in_channels_list} # NOTE: resolves to value in main config file NOT value in this file
  drop_path_rate: .1
  return_intermediates: true # whether to return intermediate features from the backbone