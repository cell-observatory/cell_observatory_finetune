defaults:
  - models: maskrcnn_fpn        # Loads configs/models/maskrcnn_fpn.yaml
  - models/backbones: hiera_fpn     # Loads configs/models/backbones/hiera_fpn.yaml
  - datasets: skittlez       # Loads configs/datasets/skittlez.yaml
  - metrics: metrics        # Loads configs/metrics/metrics.yaml
  - transforms: transforms_skittlez # Loads configs/transforms/transforms_skittlez.yaml
  - _self_  # self reference last to allow for overrides

# overrides
# ----------------

models:
  backbones:
    _target_: segmentation.models.backbones.fpn.BackboneWithFPN
    # NOTE: FPN may add an extra LastLevelMaxPool layer to the last feature map
    # Hence, the output feature maps may have len(return_layers) + 1 maps
    # return layers specifies which feature maps to run through the FPN
    return_layers: {"p0": "p0", "p1": "p1", "p2": "p2"} # 2x downsample per return layer used + LastLevelMaxPool
    in_channels_list: [96, 192, 384] # , 768  (matches embed_dim * stage sequence)
    out_channels: ${backbone_out_channels}
    norm_layer: null
    # extra_blocks # FPN may add an extra LastLevelMaxPool layer to the last feature map
  mask_roi_pool:
    _target_: segmentation.models.heads.poolers.MultiScaleRoIAlign
    featmap_names: ${output_features}
    output_size: 14 # ROI pooling output size
    sampling_ratio: 2 # grid subsampling 
    canonical_scale: 256
    canonical_level: 4 # levels are 2,3,4 i.e. 2^2, 2^3, 2^4 downsampling of input
  rpn_anchor_generator:
    _target_: segmentation.models.rpn.anchor_generator.AnchorGenerator
    sizes:
      - [16, 24, 32]
      - [32, 48, 64]
      - [64, 96, 128]
      # - [128, 196, 256]
    aspect_ratios:
      - [0.5, 1.0, 2.0]
      - [0.5, 1.0, 2.0]
      - [0.5, 1.0, 2.0]
      # - [0.5, 1.0, 2.0]
    aspect_ratios_z:
      - [0.5, 1.0, 2.0]
      - [0.5, 1.0, 2.0]
      - [0.5, 1.0, 2.0]
      # - [0.5, 1.0, 2.0]
  rpn_head: 
    _target_: segmentation.models.rpn.rpn_head.RPNHead
    in_channels: ${backbone_out_channels} 
    num_anchors: 27 # 3 sizes * 3 aspect ratios * 3 aspect ratios_z (TODO: make this dynamic)
  
  # NOTE: consider chaning the number of positive samples considered if the model is not learning
  #       and only predicts background
  # rpn_fg_iou_thresh: 0.5 # too high of a value will cause the model to not learn anything and always predict the background
  # rpn_bg_iou_thresh: 0.3
  # box_positive_fraction: 0.25 # positive fraction of samples in subsampling

datasets:
  batch_size: 2 # 4 # total batch size (batch_size per gpu * number of gpus) 

# ----------------

# decoder type (not used)
network: maskrcnn

# training paradigm
paradigm: segmentation.training.backend_segmentation.supervised

# backbone 
# downsampling resolution example for 256x256x256 input: 256 -> 64 (3d conv) -> 64 (q0) -> 32 (q1) -> 16 (q2) -> 8 (q3) (why we skip q3 currently) 
backbone_target: segmentation.models.backbones.hiera.Hiera
backbone_out_channels: 256 # 256 is standard from FPN paper 
# featmaps used for RPN and ROI pooling heads
output_features: ["p0", "p1", "p2"] # "p3", "pool" (p^i downsamples starting shape by 2^i+1)

# paths
outdir: /clusterfs/nvme/segment_4d/test_15
logdir: ${outdir}/logs

load_checkpointdir: null # alternative checkpointdir to load ckpt from if checkpointdir in outdir is empty 
checkpointdir: ${outdir}/checkpoints
checkpoint_update_interval: 100 # save latest checkpoint every N epochs

train_db_savedir: ${outdir}/db
db_path: /clusterfs/nvme/segment_4d/final_pipeline_v3/db/segmentation_curation_test.db

# optimizer parameters
opt: adamw # TODO: to use fused lamb, install DeepSpeed with the DS_BUILD_FUSED_LAMB environment variable 
lr: 5e-5 # initial learning rate
wd: 5e-5 # initial weight decay
ld: null # optional layer decay
clip_grad: 0.5
ema: [0.998, 1.0]

# training loop parameters
epochs: 500
val_interval: 1
log_step: 100 # step interval to show training loss in train loop
val_log_step: 20 # step interval to show loss in val loop
warmup: 25
cooldown: 50
fixedlr: false
dropout: 0.1
fixed_dropout_depth: false

# quantization
amp: fp16  # ["no", "fp16", "bf16", "fp8"]

# profiling
profile: false

# compute resources
workers: 1 # number of worker nodes
gpu_workers: 1 #4 for 1 node # number of gpus per worker
cpu_workers: 4 #16 for 1 node # number of cpu cores per worker (num gpus per worker * number of cpu cores per gpu)
distributed_sampler: true
max_worker_heartbeat_timeout: 2 # in minutes (to prevent indefinite hang if one process fails)

# deepSpeed config (Hydra will pass it to training loop)
deepspeed_config:
  fp16:
    enabled: true
    auto_cast: true
    loss_scale: 0 #  dynamic loss scaling (0 = auto)
    loss_scale_window: 1000 # number of good steps before increasing the scale again.
    hysteresis: 2 # number of overflows to wait before decreasing the loss scale.
    consecutive_hysteresis: true # if true, hysteresis must be consecutive (i.e., N overflows in a row)
    min_loss_scale: 1 # minimum loss scale to use
  bf16:
    enabled: false 
    auto_cast: false
  zero_optimization:
    stage: 3 # full ZeRO-3 with parameter + gradient + optimizer partitioning
    reduce_bucket_size: auto # controls how many elements are grouped before being reduced
    reduce_scatter: true # fused reduce + scatter ops
    contiguous_gradients: true # gradients allocated in a contiguous memory block
    overlap_comm: true # overlap communication with computation
    stage3_prefetch_bucket_size: auto # params to prefetch in advance
    stage3_param_persistence_threshold: auto # keep parameters in memory if theyâ€™re small and reused often
    stage3_max_live_parameters: 1e9 
    stage3_max_reuse_distance: 1e9
    stage3_gather_16bit_weights_on_model_save: true # reconstruct full weights (in FP16) during saving, rather than saving sharded pieces
    offload_optimizer: # disables offloading to CPU, everything stays on GPU
      device: none 
    offload_param:
      device: none
  tensorboard:
    enabled: true
    output_path: ${logdir}
    job_name: ${outdir}
  csv_monitor:
    enabled: true
    output_path: ${logdir}
    job_name: ${outdir}
  gradient_clipping: ${clip_grad}
  steps_per_print: 100
  gradient_accumulation_steps: 1 # number of steps to accumulate gradients before performing a backward/update pass
  train_batch_size: ${datasets.batch_size}
  zero_allow_untested_optimizer: true
  flops_profiler:
    enabled: true
    profile_step: 1
    module_depth: -1
    top_modules: 1
    detailed: true
    output_file: ${logdir}/flops_profiler.log

# ray ScalingConfig (some variables are set to null to be set in the training loop)
scaling_config:
  num_workers: null # int(cfg.workers) * int(cfg.gpu_workers)
  use_gpu: true
  resources_per_worker:
    CPU: null # int(cfg.cpu_workers) // int(cfg.gpu_workers)
    GPU: 1
  trainer_resources:
    CPU: 1

# ray RunConfig
run_config:
  log_to_file: true
  storage_path: ${outdir}
  checkpoint_config:
    num_to_keep: 3
    checkpoint_score_attribute: loss
    checkpoint_score_order: min
  failure_config:
    max_failures: 0
  
# torch Config
torch_config:
  timeout_s: 3600